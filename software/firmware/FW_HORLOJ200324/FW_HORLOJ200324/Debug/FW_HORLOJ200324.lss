
FW_HORLOJ200324.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d2b  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000995  00000000  00000000  00000fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003be  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a8  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000293  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000268f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 89 00 	call	0x112	; 0x112 <main>
  88:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z11setupTIMER2v>:
void holdTime(){
	for (unsigned int i=0; i<50000; i++)
	{
		
	}
}
  90:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
  a0:	e6 eb       	ldi	r30, 0xB6	; 182
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <__vector_9>:

ISR(TIMER2_OVF_vect){
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	4f 93       	push	r20
  bc:	5f 93       	push	r21
  be:	6f 93       	push	r22
  c0:	7f 93       	push	r23
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
	//cli();
	sysRTC.Ticker();
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 8f 00 	call	0x11e	; 0x11e <_ZN3rtc6TickerEv>
	PORTB ^= (1<<2);
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	98 27       	eor	r25, r24
  dc:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	e7 ea       	ldi	r30, 0xA7	; 167
  e0:	f1 e6       	ldi	r31, 0x61	; 97
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <__vector_9+0x36>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <__vector_9+0x3c>
  e8:	00 00       	nop
	_delay_ms(100);
	PORTB ^= (1<<2);
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	89 27       	eor	r24, r25
  ee:	85 b9       	out	0x05, r24	; 5
	//sei();
}
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	bf 91       	pop	r27
  f6:	af 91       	pop	r26
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	7f 91       	pop	r23
  fe:	6f 91       	pop	r22
 100:	5f 91       	pop	r21
 102:	4f 91       	pop	r20
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <main>:

int main(void)
{
	setupTIMER2();
 112:	0e 94 48 00 	call	0x90	; 0x90 <_Z11setupTIMER2v>
	
	DDRB |= (1<<2);
 116:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<2);
 118:	2a 9a       	sbi	0x05, 2	; 5
	
	sei();
 11a:	78 94       	sei
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0xa>

0000011e <_ZN3rtc6TickerEv>:
inline void rtc::incrementTime(){
	incrementSeconds();
}
	
inline void rtc::incrementSeconds(){
	if(_current_time.sec == 59){
 11e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_ZN3rtc13_current_timeE+0x4>
 122:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_ZN3rtc13_current_timeE+0x5>
 126:	8b 33       	cpi	r24, 0x3B	; 59
 128:	91 05       	cpc	r25, r1
 12a:	09 f5       	brne	.+66     	; 0x16e <_ZN3rtc6TickerEv+0x50>
		_current_time.sec = 0;
 12c:	e1 e0       	ldi	r30, 0x01	; 1
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	15 82       	std	Z+5, r1	; 0x05
 132:	14 82       	std	Z+4, r1	; 0x04
		_current_time.sec++;
	}
}

inline void rtc::incrementMinutes(){
	if(_current_time.min == 59){
 134:	82 81       	ldd	r24, Z+2	; 0x02
 136:	93 81       	ldd	r25, Z+3	; 0x03
 138:	8b 33       	cpi	r24, 0x3B	; 59
 13a:	91 05       	cpc	r25, r1
 13c:	91 f4       	brne	.+36     	; 0x162 <_ZN3rtc6TickerEv+0x44>
		_current_time.min = 0;
 13e:	13 82       	std	Z+3, r1	; 0x03
 140:	12 82       	std	Z+2, r1	; 0x02
		_current_time.min++;
	}
}
	
inline void rtc::incrementHours(){
	if(_current_time.hour == 23){
 142:	80 81       	ld	r24, Z
 144:	91 81       	ldd	r25, Z+1	; 0x01
 146:	87 31       	cpi	r24, 0x17	; 23
 148:	91 05       	cpc	r25, r1
 14a:	29 f4       	brne	.+10     	; 0x156 <_ZN3rtc6TickerEv+0x38>
		_current_time.hour = 0;
 14c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_ZN3rtc13_current_timeE+0x1>
 150:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_ZN3rtc13_current_timeE>
 154:	08 95       	ret
		} else {
		_current_time.hour++;
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <_ZN3rtc13_current_timeE+0x1>
 15c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_ZN3rtc13_current_timeE>
 160:	08 95       	ret
inline void rtc::incrementMinutes(){
	if(_current_time.min == 59){
		_current_time.min = 0;
		incrementHours();
		} else {
		_current_time.min++;
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_ZN3rtc13_current_timeE+0x3>
 168:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_ZN3rtc13_current_timeE+0x2>
 16c:	08 95       	ret
inline void rtc::incrementSeconds(){
	if(_current_time.sec == 59){
		_current_time.sec = 0;
		incrementMinutes();
	} else {
		_current_time.sec++;
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_ZN3rtc13_current_timeE+0x5>
 174:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_ZN3rtc13_current_timeE+0x4>
 178:	08 95       	ret

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
